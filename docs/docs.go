package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"

	cmd "github.com/goharbor/harbor-cli/cmd/harbor/root"
	"github.com/spf13/cobra"
)

const frontmdtemplate = `---
title: %s
date: %s
categories: %s
tags: %s
permalink: %s
---
`


func preblock(filename string) string {
	file := strings.Split(filename, ".md")
	tname := filepath.Base(file[0])
	title := strings.ReplaceAll(tname,"_"," ")
	words := strings.Split(tname, "_")
	tags := fmt.Sprintf("[%s]", strings.Join(words, ","))
	formattedTime := time.Now().Format("2006-01-02 15:04:05 -0700")
	if len(words) <= 1 {
		url := words[0]
		return fmt.Sprintf(frontmdtemplate, title, formattedTime, tags, tags, url)
	}
	if len(words) == 3 {
		url := words[0] + "/" + words[1] + "/" + words[2]
		return fmt.Sprintf(frontmdtemplate, title, formattedTime, tags, tags, url)
	}
	if len(words) == 4 {
		url := words[0] + "/" + words[1] + "/" + words[2] + "/" + words[3]
		return fmt.Sprintf(frontmdtemplate, title, formattedTime, tags, tags, url)
	}
	url := words[0] + "/" + words[1]
	return fmt.Sprintf(frontmdtemplate, title, formattedTime, tags, tags, url)
}

func main(){
	currentDir, err := os.Getwd()
	if err != nil {
		fmt.Println(err)
	}
	docDir := fmt.Sprintf("%s/%s", currentDir, "_posts/")
	err = GenMarkdownTreeCustom(cmd.RootCmd(), docDir, preblock, linkHandler)
	if err != nil {
		log.Fatal(err)
	}

	fmt.Println("Documentation generated at " + docDir)
}


func linkHandler(name string) string {
	base := strings.TrimSuffix(name, path.Ext(name))
	words := strings.Split(base, "_")
	if len(words) <= 1 {
		return ""
	}
	if len(words) == 3 {
		return strings.ToLower(words[0])
	}
	if len(words) == 4 {
		return strings.ToLower(words[2]) + "/" + strings.ToLower(words[3])
	}
	return ""
}


func printOptions(buf *bytes.Buffer, cmd *cobra.Command) error {
	flags := cmd.NonInheritedFlags()
	flags.SetOutput(buf)
	if flags.HasAvailableFlags() {
		buf.WriteString("### Options\n\n```bash\n")
		flags.PrintDefaults()
		buf.WriteString("```\n\n")
	}

	parentFlags := cmd.InheritedFlags()
	parentFlags.SetOutput(buf)
	if parentFlags.HasAvailableFlags() {
		buf.WriteString("### Options inherited from parent commands\n\n```bash\n")
		parentFlags.PrintDefaults()
		buf.WriteString("```\n\n")
	}
	return nil
}

func GenMarkdownCustom(cmd *cobra.Command, w io.Writer, linkHandler func(string) string) error {
	cmd.InitDefaultHelpCmd()
	cmd.InitDefaultHelpFlag()

	buf := new(bytes.Buffer)
	name := cmd.CommandPath()

	buf.WriteString("## " + name + "\n\n")
	buf.WriteString(cmd.Short + "\n\n")
	if len(cmd.Long) > 0 {
		buf.WriteString("### Synopsis\n\n")
		buf.WriteString(cmd.Long + "\n\n")
	}

	if cmd.Runnable() {
		buf.WriteString(fmt.Sprintf("```bash\n%s\n```\n\n", cmd.UseLine()))
	}

	if len(cmd.Example) > 0 {
		buf.WriteString("### Examples\n\n")
		buf.WriteString(fmt.Sprintf("```bash\n%s\n```\n\n", cmd.Example))
	}

	if err := printOptions(buf, cmd); err != nil {
		return err
	}
	if hasSeeAlso(cmd) {
		buf.WriteString("### SEE ALSO\n\n")
		if cmd.HasParent() {
			parent := cmd.Parent()
			pname := parent.CommandPath()
			link := pname + ".md"
			link = strings.ReplaceAll(link, " ", "_")
			buf.WriteString(fmt.Sprintf("* [%s](%s)\t - %s\n", pname, linkHandler(link), parent.Short))
			cmd.VisitParents(func(c *cobra.Command) {
				if c.DisableAutoGenTag {
					cmd.DisableAutoGenTag = c.DisableAutoGenTag
				}
			})
		}

		children := cmd.Commands()

		for _, child := range children {
			if !child.IsAvailableCommand() || child.IsAdditionalHelpTopicCommand() {
				continue
			}
			cname := name + " " + child.Name()
			link := cname + ".md"
			link = strings.ReplaceAll(link, " ", "_")
			buf.WriteString(fmt.Sprintf("* [%s](%s)\t - %s\n", cname, linkHandler(link), child.Short))
		}
		buf.WriteString("\n")
	}
	if !cmd.DisableAutoGenTag {
		buf.WriteString("###### Auto generated by spf13/cobra on " + time.Now().Format("2-Jan-2006") + "\n")
	}
	_, err := buf.WriteTo(w)
	return err
}

func hasSeeAlso(cmd *cobra.Command) bool {
	if cmd.HasParent() {
		return true
	}
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		return true
	}
	return false
}

func GenMarkdownTreeCustom(cmd *cobra.Command, dir string, filePrepender, linkHandler func(string) string) error {
	for _, c := range cmd.Commands() {
		if !c.IsAvailableCommand() || c.IsAdditionalHelpTopicCommand() {
			continue
		}
		if err := GenMarkdownTreeCustom(c, dir, filePrepender, linkHandler); err != nil {
			return err
		}
	}

	now := time.Now().Format("2006-01-02")
	basename := strings.ReplaceAll(cmd.CommandPath(), " ", "_") + ".md"
	name := fmt.Sprint(now + "-" + basename)
	filename := filepath.Join(dir,basename)
	fname := filepath.Join(dir,name)
	f, err := os.Create(fname)
	if err != nil {
		return err
	}
	defer f.Close()

	if _, err := io.WriteString(f, filePrepender(filename)); err != nil {
		return err
	}
	if err := GenMarkdownCustom(cmd, f, linkHandler); err != nil {
		return err
	}
	return nil
}
